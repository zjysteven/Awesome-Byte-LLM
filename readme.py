import json

def generate_markdown(json_file, output_file):
    with open(json_file, 'r') as f:
        papers = json.load(f)
    # sort by date (MM/YY)
    papers = sorted(papers, key=lambda x: (int(x['date'].split('/')[1]), int(x['date'].split('/')[0])), reverse=True)
    
    with open(output_file, 'w') as f:
        f.write("<p align='center'>\n")
        f.write("  <img src='assets/teaser.webp' alt='A teaser figure generated by DALL-E' width=70%>\n")
        f.write("</p>\n\n")

        # title
        f.write("# Awesome Byte-Based Large Language Models\n\n")

        # intro
        f.write("## Introduction\n\n")

        f.write(
            "Recently, there has been a growing interest in studying byte-based large language models (LLMs). These models eliminate the need for tokenization and operate directly on raw bytesâ€”the universal format of the digital world. Byte-based models offer several promising advantages, including but not limited to:\n\n" \
            "- **Enhanced robustness and generalization:** By removing the heuristic biases introduced by tokenization, these models could achieve better adaptability.\n" \
            "- **Cross-modality scalability:** Since all data can be represented as bytes, these models naturally extend to multiple modalities.\n\n"
        )
        
        f.write("This repository serves as an ongoing collection of papers and resources focused on byte-based LLMs.\n\n")

        # papers
        f.write("## Papers\n\n")
        f.write("""The meaning of most fields are clear by their names. "Date" is the time that the work is released/made public (e.g., the timestamp of its first arXiv version). "Summary" is a one-sentence summary of the paper.\n\n""")

        # table header
        f.write("| Title | Date (MM/YY) | Source | Code | Summary |\n")
        f.write("|-------|:------------:|:------:|:----:|---------|\n")
        
        # populate the table
        for paper in papers:
            if 'code' not in paper or paper['code'] in ['N/A', 'NA', 'na', 'n/a', '-']:
                code = '-'
            else:
                assert 'code_official' in paper, "If code is provided, whether it is official or not should be specified."
                code = f"[official]({paper['code']})" if paper['code_official'] else f"[unofficial]({paper['code']})"

            if 'summary' not in paper or paper['summary'] in ['N/A', 'NA', 'na', 'n/a', '-']:
                summary = '-'
            else:
                summary = "<details>" + paper['summary'] + "</details>"

            f.write(f"| [{paper['title']}]({paper['link']}) | {paper['date']} | {paper['source']} | {code} | {summary} |\n")

        # contributing
        f.write("\n\n## Contributing\n\n")
        f.write("Contributions are always welcome. There are two ways to add a new paper:\n")
        f.write("1. The easiest way is to open an issue, where I have a template for you to fill out.\n")
        f.write("2. If you would like to be listed as a contributor, you can add the paper to `papers.json` and make a pull request. Please do NOT directly edit `README.md`.\n")

if __name__ == "__main__":
    generate_markdown('papers.json', 'README.md')
